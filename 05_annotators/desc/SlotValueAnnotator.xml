<?xml version="1.0" encoding="UTF-8"?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
  <primitive>true</primitive>  <annotatorImplementationName>gov.nih.cc.rmd.nlp.framework.annotator.SlotValueAnnotator</annotatorImplementationName>
  <analysisEngineMetaData>
    <name>SlotValueAnnotator</name>
    <description>SlotValue is an annotator that identifies simple 
 * slot:value constructs in a document. These get 
 * labeled as utterances of the slotValue subclass.
 * 
 * This class relies on a small file of known slot names that don't 
 * fit the regular pattern (resources/slotValue/knownSlots.txt)
 * 
 * This resource includes if the name should be a slot, or a heading,
 * or neither.  The resource also includes if the slot should be
 * further processed or not.  Some slots are known to have content
 * that will be quantitative, or PHI information.
 *
 * The typical slot pattern includes looking for a colon delimiter,
 * looking to the left of the delimiter (to the beginning of the line) 
 * and to the right of the delimiter (to the end of line)
 * and looking at the line below the delimiter.
 * If the string to the left of the delimiter is all in upper case
 * or in initial caps, it's a header of some sort.
 * If there is a header, and there is content to the left of the
 * delimiter, if there are only a few tokens (&lt;14) it's a slot content.
 * If there is content on the line under the header, and if it's &lt;14 tokens
 * it's a slot content.

The slot value processing could be turned off if the "--termProcessing=true" is set on.  

The resource used is resources/vinciNLPFramework/local/slotValue/knownSlots.txt.</description>
    <version>2019.09.21</version>
    <vendor/>
    <configurationParameters>
      <configurationParameter>
        <name>args</name>
        <description>The args parameter passes parameters into the this annotator. 

Since this is a cross between traditional uima and uima-fit and framework annotators, the annotators are looking for parameters that are on the "args" parameter, one parameter per multi-valued element. This would be the equivelant to passing POSIX "args" thru the command line, where each element would consist of "key=value"

An option specific to this annotator : 
--termProcessing=false|true  (default set to false)  When set to true,  turns off checking for slots and values. 


Optional logging arguments that could be passed in include:
--profilePerformanceLogging=true|false   (as a string)   default == false
--logDir=/some/log/dir   (default == ./ )
--printToLog=true|false  (as a string)   default == false</description>
        <type>String</type>
        <multiValued>true</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
    </configurationParameters>
    <configurationParameterSettings>
      <nameValuePair>
        <name>args</name>
        <value>
          <array>
            <string>--logDir=./</string>
            <string>--printToLog=false</string>
            <string>--profilePerformanceLogging=false</string>
          <string>--termProcessing=false</string>
          </array>
        </value>
      </nameValuePair>
    </configurationParameterSettings>
    <typeSystemDescription>
      <imports>
        <import name="gov.va.vinci.Model"/>
      </imports>
    </typeSystemDescription>
    <typePriorities/>
    <fsIndexCollection/>
    <capabilities>
      <capability>
        <inputs/>
        <outputs/>
        <languagesSupported/>
      </capability>
    </capabilities>
  <operationalProperties>
      <modifiesCas>true</modifiesCas>
      <multipleDeploymentAllowed>true</multipleDeploymentAllowed>
      <outputsNewCASes>false</outputsNewCASes>
    </operationalProperties>
  </analysisEngineMetaData>
  <resourceManagerConfiguration/>
</analysisEngineDescription>
