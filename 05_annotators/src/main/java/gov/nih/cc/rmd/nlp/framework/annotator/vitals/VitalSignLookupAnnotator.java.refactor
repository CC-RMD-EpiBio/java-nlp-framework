/*
 * Copyright 2018 Ciitizen Corp. - All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of Ciitizen Corp.
 * The intellectual and technical concepts contained herein are proprietary to
 * Ciitizen Corp. and may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.  Dissemination of this information
 * or reproduction of this material is strictly forbidden.
 */
/**
 * VitalSignsLookupAnnotator
 * 
 * This is an extension to Lorretta - it only looks up
 * terms in vitals sections into loinc.
 *
 * @author Guy Divita
 * @created Aug 27, 2018
 * 
 */
// ================================================
package gov.nih.cc.rmd.nlp.framework.annotator.vitals;

import java.util.ArrayList;
import java.util.List;

import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.cas.FSArray;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.resource.ResourceInitializationException;

import com.ciitizen.framework.TestName;
import com.ciitizen.framework.VitalsObservation;
import com.ciitizen.framework.VitalsObservationsPanel;
import gov.nih.cc.rmd.nlp.framework.utils.terminologies.lookup.LRAGRRow;

import gov.nih.cc.rmd.nlp.framework.annotator.loretta.LorettaAnnotator;
import gov.va.chir.model.Utterance;
import gov.va.vinci.model.Concept;
import gov.nih.cc.rmd.nlp.framework.utils.GLog;
import gov.nih.cc.rmd.nlp.framework.utils.ProfilePerformanceMeter;
import gov.nih.cc.rmd.nlp.framework.utils.framework.uima.VUIMAUtil;
import gov.nih.cc.rmd.nlp.framework.utils.uima.UIMAUtil;

/**
 * Vital Sign Lookup Annotator
 */
public class VitalSignLookupAnnotator extends LorettaAnnotator {

  /** The Constant annotatorName. */
  public static final String annotatorName = VitalSignLookupAnnotator.class.getSimpleName();

  // -----------------------------------------
  /**
   * process retrieves vitals observation panels and looks up the test names -
   * to put loinc codes on each vitalsObservation.
   *
   * @param pJCas the j cas
   * @throws AnalysisEngineProcessException the analysis engine process
   *           exception
   */
  // -----------------------------------------
  @Override
  public void process(JCas pJCas) throws AnalysisEngineProcessException {

    try {
      this.performanceMeter.startCounter();
      String vitalFilter = "^Z10002";

      List<Annotation> vitalsPanels =
          UIMAUtil.getAnnotations(pJCas, VitalsObservationsPanel.typeIndexID);

      if (vitalsPanels != null && !vitalsPanels.isEmpty()) {
        // ------------------------------------------------------
        // Walk through the vitals section
        // ------------------------------------------------------
        for (Annotation aPanel : vitalsPanels) {
          // get the observations
          FSArray observations = ((VitalsObservationsPanel) aPanel).getObservations();

          if (observations != null && observations.size() > 0) {

            ArrayList<Annotation> updatedObservations =
                new ArrayList<Annotation>(observations.size());
            for (int i = 0; i < observations.size(); i++) {
              Annotation anObservation = (VitalsObservation) observations.get(i);
              String testName = ((VitalsObservation) anObservation).getTestName();

              List<LRAGRRow> rows =
                  super.getDefaultWithFilter(this.terminologies, vitalFilter, testName);

              if (rows != null && !rows.isEmpty()) {
                updateObservation((VitalsObservation) observations.get(i), rows);
                TestName observationTestName = getVitalsTestName(pJCas,
                    ((VitalsObservation) observations.get(i)).getBegin(), testName.length());
                if (observationTestName != null) // <------------------- some
                                                 // vitals don't have header
                                                 // labels
                  updateObservation(observationTestName, rows);
                // Avoid adding 8716-3 | Vital signs | as an observation
                // Avoid adding anything with a testValue that contains no
                // numbers
                if (!LRAGRRow.getsourceIDs(rows).equals("8716-3")
                    && ((VitalsObservation) observations.get(i)).getTestValue()
                        .matches(".*\\d.*")) {
                  updatedObservations.add(anObservation);
                }
              } else {
                // this annotation was not worthy of being an observation
                Annotation deleteMeAnnotation = (VitalsObservation) observations.get(i);
                deleteMeAnnotation.removeFromIndexes();
              }

            } // end for each observation

            // if there are updated Observations put these on the panel and
            // remove the old ones
            if (updatedObservations != null && !updatedObservations.isEmpty()) {
              FSArray updatedObservationz = UIMAUtil.list2FsArray(pJCas, updatedObservations);
              ((VitalsObservationsPanel) aPanel).setObservations(updatedObservationz);
              observations.removeFromIndexes();
            } else {
              // If there are no updated observations, remove the panel too
              observations.removeFromIndexes();
              aPanel.removeFromIndexes();
            }

            // find the vitals test -

          } // if there are observations
        } // end loop thru vitals panel
      } // end if there are vitals panel

      this.performanceMeter.stopCounter();

    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, this.getClass(), "process",
          "Issue with " + this.getClass().getName() + " " + e.toString());
      // throw new AnalysisEngineProcessException();
    }
  } // end Method process() ----------------

  // =================================================
  /**
   * getVitalsTestName .
   *
   * @param pJCas the j cas
   * @param pBegin the begin
   * @param pLength the length
   * @return TestName
   */
  // =================================================
  private final TestName getVitalsTestName(JCas pJCas, int pBegin, int pLength) {

    TestName returnVal = null;

    List<Annotation> testNames =
        UIMAUtil.fuzzyFindAnnotationsBySpan(pJCas, TestName.typeIndexID, pBegin, pBegin + pLength);

    if (testNames != null && !testNames.isEmpty())
      returnVal = (TestName) testNames.get(0);

    return returnVal;

  } // end Method getVitalsTestName() ---------------

  // =================================================
  /**
   * getTerminologiesFromSection returns a terminology based on what section
   * this annotation is in
   * 
   * i.e., look in rxnorm if you are in a VitalSigns section look in loinc if
   * you are in vitals, labs ... section otherwise look in snomedct_us
   *
   * @param pJCas the j cas
   * @param pSentence the sentence
   * @return String[]
   */
  // =================================================
  @Override
  public String[] getTerminologiesFromSection(JCas pJCas, Utterance pSentence) {

    String[] terminologies = this.terminologies;

    return terminologies;
  } // end Method getTerminologyFromSection()----------

  // =================================================
  /**
   * UpdateObservation adds concept info to this observation.
   *
   * @param pObservation the observation
   * @param pRows the rows
   */
  // =================================================
  private final void updateObservation(Concept pObservation, List<LRAGRRow> pRows) {

    String cuis = LRAGRRow.getCuis(pRows);
    String conceptNames = LRAGRRow.getConceptNames(pRows);
    String semanticTypes = LRAGRRow.getSemanticTypes(pRows);

    pObservation.setCuis(cuis);
    pObservation.setCategories(semanticTypes);
    pObservation.setConceptNames(conceptNames);

    // 0 1 2 3 4 5 6 7 8 9 10|11|12|13|4
    // C1519530|title|<noun>|<all>|Title|Title|T078|NCI|C19067|n|0 |S
    // |PF|title|1

    StringBuffer buff = new StringBuffer();
    for (LRAGRRow row : pRows) {
      if (!row.getName().contains("--")) { // <----- takes off matches that are
                                           // over specific - a bad heurisitc
                                           // but working for now
        buff.append(row.toLRAGRString());
        break;
        // take just the first one
      }
    }
    pObservation.setOtherInfo(buff.toString());

    String sectionName = VUIMAUtil.deriveSectionName(pObservation);
    pObservation.setSectionName(sectionName);

  } // end Method updateObservation() -------------

  // ----------------------------------
  /**
   * initialize initializes the class. Parameters are passed in via a String
   * array with each row containing a --key=value format.
   * 
   * It is important to adhere to the posix style "--" prefix and include a
   * "=someValue" to fill in the value to the key.
   *
   * @param pArgs the args
   * @throws ResourceInitializationException the resource initialization
   *           exception
   */
  // ----------------------------------
  @Override
  public void initialize(String[] pArgs) throws ResourceInitializationException {

    super.initialize(pArgs);

    this.performanceMeter = new ProfilePerformanceMeter(pArgs, this.getClass().getSimpleName());

    super.terminologies = new String[1];
    super.terminologies[0] = "LNC";
    GLog.println(GLog.DEBUG_LEVEL, this.getClass(), "initialize", "New improved medication tool!");

    // -------------------------
    // Set this to the annotation type being created in this class
    // -------------------------
    this.annotationType = "Vitals";

    // try {
    //
    //
    //
    // } catch (Exception e) {
    // e.printStackTrace();
    // String msg = "Issue initizlizng Loretta " + e.toString();
    // GLog.println(GLog.ERROR_LEVEL, this.getClass(), "initialize", msg);
    // throw new ResourceInitializationException();
    // }
  } // end Method initialize() -------

  // ------------------------------
  /** The performance meter. */
  // Class Variables
  private ProfilePerformanceMeter performanceMeter = null;

} // end Class ExampleAnnotator() ---------------
