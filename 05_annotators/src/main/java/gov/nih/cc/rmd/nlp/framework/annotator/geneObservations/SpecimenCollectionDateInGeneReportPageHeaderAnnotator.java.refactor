// =================================================
/**
 * SpecimenCollectionDateInGeneReportPageHeaderAnnotator
 * 
 *   finds specimen collection date.  If found,
 *   this date gets set as the section's event date
 *   and the document's event date.
 *       
 *  
 * @author  Guy Divita 
 * @created Aug 29, 2018
 *
 * 
 * 

 */
// ================================================
package gov.nih.cc.rmd.nlp.framework.annotator.geneObservations;

import java.util.List;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.resource.ResourceInitializationException;

import com.ciitizen.framework.GeneVariantObservation;
import com.ciitizen.framework.PageHeader;
import com.ciitizen.framework.SectionZone;

import gov.nih.cc.rmd.nlp.framework.annotator.diagnosis.DiagnosisLookupAnnotator;
import gov.va.chir.model.DocumentHeader;
import gov.va.chir.model.LexicalElement;
import gov.va.chir.model.Line;
import gov.va.chir.model.Sentence;
import gov.va.vinci.model.temporal.AbsoluteDate;
import gov.va.vinci.model.temporal.CollectionDate;
import gov.nih.cc.rmd.nlp.framework.utils.GLog;
import gov.nih.cc.rmd.nlp.framework.utils.ProfilePerformanceMeter;
import gov.nih.cc.rmd.nlp.framework.utils.framework.uima.VUIMAUtil;
import gov.nih.cc.rmd.nlp.framework.utils.uima.UIMAUtil;



public class SpecimenCollectionDateInGeneReportPageHeaderAnnotator extends JCasAnnotator_ImplBase   {
 

  // -----------------------------------------
  /**
   * process 
   * 
   * 
   */
  // -----------------------------------------
  @Override
  public void process(JCas pJCas) throws AnalysisEngineProcessException {
   
    try {
    this.performanceMeter.startCounter();
    
    DocumentHeader documentHeader = VUIMAUtil.getDocumentHeader(pJCas);
    
   
    if ( documentHeader != null && 
        documentHeader.getSectionType() != null && 
        documentHeader.getSectionType().toLowerCase().contains("genereportpageheading")) 
      
      processGenePageHeadingSection( pJCas, documentHeader );
    
     else {
    
       // Look for every page heading 
       List<Annotation> sections = UIMAUtil.getAnnotations(pJCas, PageHeader.typeIndexID );
    
       if (sections != null && !sections.isEmpty()) {
      
         for ( Annotation section : sections) {
           Annotation collectionDate = processGenePageHeading( pJCas, section );
          
           if ( collectionDate != null )
             documentHeader.setEventDate( collectionDate.getCoveredText());
           break;
         }
       }
     }
    
    
    
    this.performanceMeter.stopCounter();
    
    } catch (Exception e) {
      e.printStackTrace();
      System.err.println("Issue with " + this.getClass().getName() + " " + e.toString());
   //   throw new AnalysisEngineProcessException();
    }
  } // end Method process() ----------------
   
  
  // =================================================
  /**
   * processGenePageHeadingSection looks for collection
   * date in a known gene page heading
   * 
   * @param pJCas
   * @param documentHeader
   * @throws Exception
  */
  // =================================================
  private final void processGenePageHeadingSection(JCas pJCas, DocumentHeader documentHeader) throws Exception {
    
    List<Annotation> sections = UIMAUtil.getAnnotations(pJCas, SectionZone.typeIndexID );
    
    if (sections != null && !sections.isEmpty()) {
      
      for ( Annotation section : sections) {
        String sectionType = ((SectionZone) section ).getSectionName();
        
        if ( sectionType != null && sectionType.toLowerCase().contains("genereportpageheading")) {
          
          Annotation collectionDate = processGenePageHeading( pJCas, section );
          
          if ( collectionDate != null )
            documentHeader.setEventDate( collectionDate.getCoveredText());
          break;
        }
      }
    }
    
    
    
  } // end Method processGenePageHeadingSection() ----


  // =================================================
  /**
   * processGenePageHeading 
   * 
   * @param pSection
  */
  // =================================================
  private final Annotation processGenePageHeading(JCas pJCas, Annotation pSection) {
    
    Annotation collectionDate = null;
    List<Annotation> terms = UIMAUtil.getAnnotationsBySpan(pJCas, LexicalElement.typeIndexID, pSection.getBegin(), pSection.getEnd());
    
    
    if ( terms != null && !terms.isEmpty() ) {
      
      for ( Annotation term : terms ) {
        if ( ((LexicalElement) term).getSemanticTypes() != null ) {
          
          String semanticTypes =  ((LexicalElement) term).getSemanticTypes();
         
          if ( semanticTypes.contains("CollectionDateEvidence")) {
          
             collectionDate = findCollectionDateInNextLine( pJCas, term);
            
            if ( collectionDate == null )  
              // look for it in the same line after the term
               collectionDate = findCollectionDate( pJCas, term);
            
            if ( collectionDate != null) {
              ((SectionZone) pSection).setEventDate( collectionDate.getCoveredText());
              ((SectionZone) pSection).setStatementDate( collectionDate.getCoveredText());
              break;
            }
          }
        }
      }
      
      
    }
    
    return collectionDate;
    
  } // end Method processGeneSection() --------------




  // =================================================
  /**
   * findCollectionDateInNextLine finds specimen site from the last or first
   * field in the line after the evidence was found
   * 
   * @param pJCas
   * @param term
   * @return Annotation
  */
  // =================================================
   private Annotation findCollectionDateInNextLine(JCas pJCas, Annotation pTerm) {
     Annotation returnVal = null;
    
    // get the line of the term
    Line line = VUIMAUtil.getLine(pJCas, pTerm);
    
    // get the next line 
    List<Annotation> nextLines = UIMAUtil.fuzzyFindAnnotationsBySpan(pJCas,  Line.typeIndexID,  line.getEnd() + 2, line.getEnd()+3);
    
    if ( nextLines != null && !nextLines.isEmpty()) {
      // get the sentences from the next line
      Annotation nextLine = nextLines.get(0);
      String aLine = nextLine.getCoveredText();
      List<Annotation>sentences = UIMAUtil.fuzzyFindAnnotationsBySpan(pJCas,  Sentence.typeIndexID, nextLine.getBegin(), nextLine.getEnd() );
       
      if ( sentences != null && !sentences.isEmpty())
        for ( Annotation sentence : sentences ) {
          if ( ( returnVal = findCollectionDateAux( pJCas, (Sentence) sentence )) != null )
            break;
        }
      
    }
    
    return returnVal;
  } // end Method findCollectionDate 

   
// =================================================
  /**
   * findCollectionDate finds specimen site in the line
   * the evidence was in
   * 
   * @param pJCas
   * @param term
   * @return Annotation
  */
  // =================================================
   private Annotation findCollectionDate(JCas pJCas, Annotation pTerm) {
      Annotation returnVal = null;
    
    // get the line of the term
    Line line = VUIMAUtil.getLine(pJCas, pTerm);
    
      List<Annotation>sentences = UIMAUtil.fuzzyFindAnnotationsBySpan(pJCas,  Sentence.typeIndexID, pTerm.getEnd() +1,  line.getEnd() );
       
      if ( sentences != null && !sentences.isEmpty())
        for ( Annotation sentence : sentences ) {
          String sent = sentence.getCoveredText();
          if ( ( returnVal = findCollectionDateAux( pJCas, (Sentence) sentence )) != null )
            break;
        }
      
    
    return returnVal;
  } // end Method findCollectionDate 
   

// =================================================
/**
 * findCollectionDateAux looks for specimen site terms in this sentence
 * 
 * 
 * @param pJCas
 * @param pSentence
 * @return List<Annotation>
*/
// =================================================
private final Annotation findCollectionDateAux(JCas pJCas, Sentence pSentence) {
   Annotation returnVal = null;
  
  if ( pSentence != null ) {
    try {
      
      List<Annotation>dates = UIMAUtil.fuzzyFindAnnotationsBySpan(pJCas,  AbsoluteDate.typeIndexID, pSentence.getBegin(), pSentence.getEnd() );
      
      String sent = pSentence.getCoveredText();
      
      if ( dates != null && !dates.isEmpty()) {
        // ---------------
        // assuming one date found here
        returnVal = createCollectionDate( pJCas, dates.get(0));
      }
      
    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, this.getClass(), "findCollectionDateAux", "issue with finding a collection date");
    }
  }
  
  
  return returnVal;
} // end Method findDiagnosisAux() ----------------




// =================================================
/**
 * createCollectionDate 
 * 
 * @param pJCas
 * @param pDate
 * @return CollectionDate
*/
// =================================================
private final Annotation createCollectionDate(JCas pJCas, Annotation pDate) {
  
  CollectionDate statement = new CollectionDate (pJCas);
  statement.setBegin( pDate.getBegin());
  statement.setEnd( pDate.getEnd());
  statement.setId( "SpecimentCollectionDateInReportPageHeaderAnnotator_" + this.annotationCtr++);
  statement.addToIndexes();
  
  
  return statement;
} // end Method createCollectionDate() -------------


//----------------------------------
/**
 * destroy
* 
 **/
// ----------------------------------
public void destroy() {
  this.performanceMeter.writeProfile( this.getClass().getSimpleName());
}


  //----------------------------------
  /**
   *  initialize    This is the standard uima way to pass parameters to an annotator.
   *                It is cumbersome.  It requires creating a config file with params
   *                in it, making it difficult to dynamically pass in parameters. 
   *                
   *                This method merges the uima way and keeping the ability to dynamically
   *                pass parameters into the class via - putting all parameters in a string
   *                array called "args" with each row containing a --key=value format.
   *                This way, arguments could be directly passed from command line,
   *                or read from a config file, or dynamically added to that string
   *                passed in. 
   *                
   *                It is important to adhere to the posix style "--" prefix and
   *                include a "=someValue" to fill in the value to the key. 
   * 
   * @param aContext
   * @throws ResourceInitializationException
   * 
   **/
  // ----------------------------------
  public void initialize(UimaContext aContext) throws ResourceInitializationException {
       
     
      String[] args = null;
      try {
        args                 = (String[]) aContext.getConfigParameterValue("args");  

        initialize(args);
        
      } catch (Exception e ) {
        String msg = "Issue in initializing class " + this.getClass().getName() + " " + e.toString() ;
        GLog.println(GLog.ERROR_LEVEL, msg);     // <------ use your own logging here
        throw new ResourceInitializationException();
      }
      
  
  } // end Method initialize() -------
  
  //----------------------------------
  /**
   * initialize initializes the class.  Parameters are passed in via a String
   *                array  with each row containing a --key=value format.
   *                
   *                It is important to adhere to the posix style "--" prefix and
   *                include a "=someValue" to fill in the value to the key. 
   * @param pArgs
   * @throws  ResourceInitializationException            
   * 
   **/
  // ----------------------------------
  public void initialize(String[] pArgs) throws ResourceInitializationException {
    
   
    
    this.performanceMeter = new ProfilePerformanceMeter( pArgs, this.getClass().getSimpleName() );
    
  } // end Method initialize() -------
  
  
  // ---------------------------------------
  // Global Variables
  // ---------------------------------------
  protected int annotationCtr = 0;
  ProfilePerformanceMeter performanceMeter = null;
  
  
} // end Class ProceduresAnnotator() ---------------

