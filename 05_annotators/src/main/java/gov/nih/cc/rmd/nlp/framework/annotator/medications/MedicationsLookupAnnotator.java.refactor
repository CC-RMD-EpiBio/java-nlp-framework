// =================================================
/**
 * MedicationsLookupAnnotator
 * 
 * This is an extension to Lorretta - it only looks up
 * terms in medication sections into rxNorm.
 *
 * @author Guy Divita
 * @created April 10, 2018
 * 
 */
// ================================================
package gov.nih.cc.rmd.nlp.framework.annotator.medications;

import java.util.List;

import org.apache.uima.cas.Type;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.resource.ResourceInitializationException;

import com.ciitizen.Medication;
import com.ciitizen.framework.model.Shape;
import gov.nih.cc.rmd.nlp.framework.utils.terminologies.lookup.LRAGRRow;
import gov.nih.cc.rmd.nlp.framework.utils.terminologies.utilities.LexRecord;
import gov.nih.cc.rmd.nlp.framework.annotator.loretta.LorettaAnnotator;
import gov.nih.cc.rmd.nlp.framework.annotator.loretta.TempTerm;
import gov.va.chir.model.ContentHeading;
import gov.va.chir.model.Utterance;
import gov.va.vinci.model.Concept;
import gov.nih.cc.rmd.nlp.framework.utils.GLog;
import gov.nih.cc.rmd.nlp.framework.utils.framework.uima.VUIMAUtil;
import gov.nih.cc.rmd.nlp.framework.utils.uima.UIMAUtil;

public class MedicationsLookupAnnotator extends LorettaAnnotator {

  public static final String annotatorName = MedicationsLookupAnnotator.class.getSimpleName();



  // =================================================
  /**
   * getTerminologiesFromSection returns a terminology
   * based on what section this annotation is in
   * 
   * i.e., look in rxnorm if you are in a medications section
   *       look in loinc if you are in vitals, labs ... section
   *       otherwise look in snomedct_us
   * 
   * @param pJCas
   * @param pSentence
   * @return String[]
  */
  // =================================================
  @Override
  public String[] getTerminologiesFromSection(JCas pJCas, Utterance pSentence) {
    
    String[] terminologies =  this.terminologies; 
    
    return terminologies;
  } // end Method getTerminologyFromSection()----------

 

 // =================================================
 /**
  * makeTermFromLRAGRRow
  * 
  * If the mention is in a content heading - it's not a medication
  * if a mention is part of another shape or concept, it's not a medication
  * 
  * @param pRows
  * @return List<Annotation>
 */
 // =================================================
  @Override
  protected
  Annotation makeTermFromLRAGRRows(JCas pJCas, TempTerm aTempTerm, List<LRAGRRow> pRows ) {
   
    
    // filter out drug form concepts - we don't want to make an annotaton for "tablet" or "pill"
    
    if ( isDrugForm( pRows ))  return null ;
    
   Medication statement = new Medication(pJCas);
  
  List<Annotation> tokens = aTempTerm.getRealTokens();
   if ( tokens == null || tokens.isEmpty()) {
     GLog.println(GLog.ERROR_LEVEL, "Issue with term with no aligned tokens " );
     return null;
   }
   int beginOffset = tokens.get(0).getBegin();
   int endOffset   = tokens.get(tokens.size() -1).getEnd();
 
   String cuis = LRAGRRow.getCuis( pRows ); 
   String conceptNames = LRAGRRow.getConceptNames( pRows);
   String semanticTypes = LRAGRRow.getSemanticTypes( pRows);
   
   String administration = "unknown";
   String dosage = "unknown";
   String packaging = "unknown";
   String route = "unkown";
   String status = "unknown";
  
   
   statement.setBegin( beginOffset);
   statement.setEnd(    endOffset );
   statement.setId("MedicationLookup_" + annotationCounter );
   statement.setCuis(cuis);
   statement.setCategories(semanticTypes);
   statement.setConceptNames(conceptNames);
   statement.setAdministration(administration);
   statement.setDosage(dosage);
   statement.setPackaging(packaging);
   statement.setRoute(route);
  
   statement.setStatus(status);
   
   
   
   if ( isInContentHeading( pJCas, statement ))
     return null;
   if ( isInOtherConcept(   pJCas, statement ))
     return null;
   
   
   //   0        1     2      3     4    5     6    7    8    9 10|11|12|13|4
   // C1519530|title|<noun>|<all>|Title|Title|T078|NCI|C19067|n|0 |S |PF|title|1
   
   StringBuffer buff = new StringBuffer();
   for ( LRAGRRow row : pRows )
     buff.append( row.toLRAGRString() + ":");
   
  statement.setOtherInfo( buff.toString());
  
  
   statement.addToIndexes();
   String sectionName = VUIMAUtil.deriveSectionName(statement);
   statement.setSectionName(sectionName);
   
  
   return statement;
   
   
 } // end Method makeTermFromLRAGRRow() -------------




  // =================================================
/**
 * isDrugForm quieries to see if any of the returned rows
 * are drug forms.  
 * 
 * @param pRows
 * @return boolean
*/
// =================================================
private final boolean isDrugForm(List<LexRecord> pRows) {
  boolean returnVal = false;
  
  if ( pRows != null  && !pRows.isEmpty())
    for ( LexRecord row : pRows ) {
      String sourceSabs = row.getSABs();
      if ( sourceSabs.contains("RXNORM") )
          returnVal = isDoseFormCode(  row );
      if ( returnVal )
        break;
    }
  
  return returnVal;
} // end Method isDrugForm() -----------------------





  // =================================================
  /**
   * isDoseFormCode returns true if this rxNormCode
   * is a doseForm
   * 
   * @param rxNormCode
   * @return boolean
  */
  // =================================================
  private boolean isDoseFormCode(LexRecord rxNormCode) {
    
    boolean returnVal = false;
    
    String tty = rxNormCode.getTTY();
    if ( tty != null && tty.contentEquals("DF")) {
      returnVal = true;
      
      }
      
    
    return returnVal;
  } // end Method isDoseFormCode() ------------------



  //----------------------------------
  /**
   * initialize initializes the class.  Parameters are passed in via a String
   *                array  with each row containing a --key=value format.
   *                
   *                It is important to adhere to the posix style "--" prefix and
   *                include a "=someValue" to fill in the value to the key. 
   * @param pArgs
   * @throws  ResourceInitializationException            
   * 
   **/
  // ----------------------------------
  public void initialize(String[] pArgs) throws ResourceInitializationException {
       
    super.initialize( pArgs);
    
    super.terminologies  = new String[1] ;
    super.terminologies[0] = "RXNORM";
    GLog.println(GLog.DEBUG_LEVEL, this.getClass(), "initialize", "New improved medication tool!");
    
    // -------------------------
    // Set this to the annotation type being created in this class
    // -------------------------
    this.annotationType = "Medication";
    
    try {
   
  
      
    } catch (Exception e) {
      e.printStackTrace();
      String msg = "Issue initizlizng Loretta " + e.toString();
      GLog.println(GLog.ERROR_LEVEL, this.getClass(), "initialize", msg);
      throw new ResourceInitializationException();
    }
  } // end Method initialize() -------
  
 

} // end Class ExampleAnnotator() ---------------
