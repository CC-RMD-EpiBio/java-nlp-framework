/*******************************************************************************
 *                                   NIH Clinical Center 
 *                             Department of Rehabilitation 
 *                       Epidemiology and Biostatistics Branch 
 *                                            2019 - 2022
 *   ---------------------------------------------------------------------------
 *   Copyright Notice:
 *   This software was developed and funded by the National Institutes of Health
 *   Clinical Center (NIHCC), part of the National Institutes of Health (NIH),
 *   and agency of the United States Department of Health and Human Services,
 *   which is making the software available to the public for any commercial
 *   or non-commercial purpose under the following open-source BSD license.
 *  
 *   Government Usage Rights Notice:
 *   The U.S. Government retains unlimited, royalty-free usage rights to this 
 *   software, but not ownership, as provided by Federal law. Redistribution 
 *   and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *      1. Redistributions of source code must retain the above copyright
 *         and government usage rights notice, this list of conditions and the 
 *         following disclaimer.
 *  
 *      2. Redistributions in binary form must reproduce the above copyright
 *         notice, this list of conditions and the following disclaimer in the
 *         documentation and/or other materials provided with the distribution.
 *        
 *      3. Neither the names of the National Institutes of Health Clinical
 *         Center, the National Institutes of Health, the U.S. Department of
 *         Health and Human Services, nor the names of any of the software
 *         developers may be used to endorse or promote products derived from
 *         this software without specific prior written permission.
 *   
 *      4. The U.S. Government retains an unlimited, royalty-free right to
 *         use, distribute or modify the software.
 *   
 *      5. Please acknowledge NIH CC as the source of this software by including
 *         the phrase: "Courtesy of the U.S. National Institutes of Health Clinical Center"
 *          or 
 *                     "Source: U.S. National Institutes of Health Clinical Center."
 *  
 *     THIS SOFTWARE IS PROVIDED BY THE U.S. GOVERNMENT AND CONTRIBUTORS "AS
 *     IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 *     TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 *     PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE U.S. GOVERNMENT
 *     OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *     EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *     PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *     PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 *     When attributing this code, please make reference to:
 *        Divita G, Carter ME, Tran LT, Redd D, Zeng QT, Duvall S, Samore MH, Gundlapalli AV. 
 *        v3NLP Framework: tools to build applications for extracting concepts from clinical text. 
 *        eGEMs. 2016;4(3). 
 *      
 *     In the absence of a specific paper or url listed above, reference https://github.com/CC-RMD-EpiBio/java-nlp-framework
 *   
 *     To view a copy of this license, visit https://github.com/CC-RMD-EpiBio/java-nlp-framework/blob/main/LICENSE.MD
 *******************************************************************************/
// =================================================
/**
 * EfficacyTests include methods to read from and write
 * to efficacy reports generated by pipelines.  These
 * utilities include building a report to house each
 * efficacy run to track whether changes made
 * elsewhere effect the efficacy of a given pipeline.
 * 
 * The efficacy test pattern includes the following:
 *   
 *  1.  Where the test data is (one or more of the following)
 *         ${projectHome}/data/vtt/someTests.vtt   Directory with annotated data in it in .vtt format
 *         ${projectHome/data/snippet/someTests.vtt  Directory  with annotated snippets for training/testing
 *         ${projectHome}/data/xmi/someTests.xmi   Directory with annotated data in it in uima's xmi format
 *         ${projecthome}/data/ascii/someTests.txt    Directory with un-annotated data in ascii format
 *   
 *  2. Where the result data spores goes:
 *        ${projectHome}/data/efficacyResults/applicationNameTest/eval/eval_main.txt   Full efficacy report
 *        ${projectHome/data/efficacyResults/applicationNameTest/efficacyTest.csv      Record of every run's f-Score
 *
 *  3. Running the test from a junit test hook -
 *       call's TestUtils.getBaseDir()  to get the ${projectHome}  directory - 
 *          This is inferred by looking for the ${user.dir}, (the current dir) 
 *          then looking for the /target/bin on that path
 *          and stripping /target/bin off
 *          
 *       from eclipse:  the current directory that mains are run from are set 
 *                      manually in the "run configuration"->arguments->working directory.  
 *                      The convention is to set this working directory to target/bin
 *       
 *       from command line via mvn test
 *                      The current directory is usually where the pom.xml is
 *                      which should be the $project home.  (I need to test if this
 *                      is the case when the reactor kicks off in a parent directory
 *                      
 *                      
 *   The efficacyTest.csv  includes the following columns : 
 *        Date|fScore|recall|precision|tp|tn|fp|fn          
 *
 * @author     Guy Divita
 * @created    Jan 16, 2018
 * 
*/

package gov.nih.cc.rmd.nlp.framework.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;

import gov.nih.cc.rmd.nlp.framework.utils.GLog;
import gov.nih.cc.rmd.nlp.framework.utils.U;

/**
 * @author guy
 *
 */
public class EfficacyTests {

  private static String EfficacyResultsHome = null;
  private ArrayList<String> contents = null;;
  private final static String Header =   "Date,fScore,recall,precision,tp,tn,fp,fn";
  private String MaxFScore;
  private String minFScore;
  private String lastFScore;
  private String filename = null;

  // =================================================
  /**
   * Constructor Opens or creates a data file to house
   * the efficacy prior results. 
   *
   * @param resultsPath
   * 
  **/
  // =================================================
  public EfficacyTests(String resultsPath) {
    
    try {
      this.filename = resultsPath + "/" + "effecacyTest.csv";
      this.contents = new ArrayList<String>();
      File aFile = new File( filename);
      
      if ( aFile.exists() ) {
        String buff = U.readFile(aFile);
        String rows[] = U.split(buff, "\n");
        for ( String row: rows) {
          if ( row.trim().length() > 0)
            this.contents.add( row);
        }
        
        this.MaxFScore = this.getMaxFScore();
        this.minFScore = this.getMinFScore();
        this.lastFScore = this.getLastFScore();
      } else {
        this.contents.add( Header ); 
       
      }
    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, "Issue opening data file in " + resultsPath );
    }
  } // End Constructor() -----------------------------

  // =================================================
  /**
   * writeEfficacyResults 
   * 
  */
  // =================================================
  public final synchronized void writeEfficacyResults() {
    
    try {
   
      U.deleteFile( this.filename);
      PrintWriter out = new PrintWriter(  this.filename);
      
      for ( String row: this.contents) {
        out.print( row);
        out.print('\n');
   
      }
      out.close();
    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, "Issue writing out the efficacy results to a file " + e.toString() );
    }
    
  } // End Method writeEfficacyResults() -------------

  // =================================================
  /**
   * finalize
   *    writes out the csv file 
   * 
  */
  // =================================================
  @Override
  public void finalize() {
    
    writeEfficacyResults();
    
  } // End Method finalize() -------------------------

  // =================================================
  /**
   * main [TBD] summary
   * 
   * @param args
  */
  // =================================================

  public static void main(String[] args) {
   
     

  }

  // =================================================
  /**
   * getEffecacyResultsHome retrieves the EFFICACY_RESULTS_HOME location.
   * If it cannot find one from the env variable "EFFICACY_RESULTS_HOME"
   * it will be hard coded to "/ciitizen/softwareRepos/framework/efficacyResults"
   * 
   * @return String
  */
  // =================================================
  public static String getEfficacyResultsHome() {
    if ( EfficacyResultsHome == null) {
      
      try {
        String baseDir = TestUtils.getBaseDir();
        String basePath = baseDir + "/data/efficacyResults";
     
      EfficacyResultsHome = basePath;
      } catch (Exception e) {
        e.printStackTrace();
        GLog.println(GLog.ERROR_LEVEL, "issue with trying to get the efficacyResultsHome " + e.toString());
        throw e;
      }
    }
      
      GLog.println(GLog.STD___LEVEL, "The %EFFICACY_RESULTS_HOME% = |"  + EfficacyResultsHome + "|" );
   
  
    
    return EfficacyResultsHome;
  }

  // =================================================
  /**
   * setResults   Read the contents of the file
   *               extract the following lines:
   *  
   *     True  Positive (TP)                                  = 0
   *     True  Negative (TN)                                  = N/A
   *     False Positive (FP)                                  = 9
   *     False Negative (FN)                                  = 0
   *     Recall                                  (tp/(tp+fn)) = 0.0
   *     Sensitivity                             (tp/(tp+fn)) = 0.0
   *     Precision                               (tp/(tp+fp)) = 0.0
   *     Positive Predictive value (PPV)         (tp/(tp+fp)) = 0.0
   *     Accuracy                      ((tp+tn)/(tp+tn+fp+fn) = 0.0
   *     Specificity                           (tn/(tn + fp)  = 0.0
   *      F-Measure (2* (precision*recall)/(precision+recall)) = NaN
   * 
   *    Date|fScore|recall|precision|tp|tn|fp|fn
   *
   *    This adds a line to the contents array
   *    
   * @param pCurrentResultsFile
  */
  // =================================================
  public void setResults(String pCurrentResultsFile) {
    
   
    String tp = " ";
    String tn = " "; 
    String fp = " ";
    String fn = " ";
    String recall = " ";
    String precision = " ";
    String fScore = " "; 
    String date = U.getDateStampSimple();
    try {
     String[] topLines = readTopLinesFrom(pCurrentResultsFile, 25);
     
   
     for (String row: topLines ) {
      String cols[] = U.split(row, "=");
      if      (cols[0].trim().startsWith("True  Positive (TP)" ))  tp        = cols[1].trim();
      else if (cols[0].trim().startsWith("True  Negative (TN)" ))  tn        = cols[1].trim();
      else if (cols[0].trim().startsWith("False Positive (FP)" ))  fp        = cols[1].trim();
      else if (cols[0].trim().startsWith("False Negative (FN)" ))  fn        = cols[1].trim();
      else if (cols[0].trim().startsWith("Recall"              ))  recall    = cols[1].trim();
      else if (cols[0].trim().startsWith("Precision"           ))  precision = cols[1].trim();
      else if (cols[0].trim().startsWith("F-Measure"           ))  fScore    = cols[1].trim();
     }
      
     if ( tp == null || tp.trim().length() == 0 ||  !U.isNumber(tp.trim())) 
       tp = "0.0";
     if ( tn == null || tn.trim().length() == 0 ||  !U.isNumber(tn.trim()))
       tn = "0.0";
     if ( fp == null || fp.trim().length() == 0 ||  !U.isNumber(fp.trim())) 
       fp = "0.0";
     if ( fn == null || fn.trim().length() == 0 ||  !U.isNumber(fn.trim()))  fn = "0.0";
     if ( recall == null || recall.trim().length() == 0 ||  !U.isNumber(recall.trim()))  recall = "0.0";
     if ( precision == null || precision.trim().length() == 0 ||  !U.isNumber(precision.trim()))  precision = "0.0";
     if ( fScore == null || fScore.trim().length() == 0 || 
         !U.isNumber(fScore.trim())) 
       fScore = "0.0";
     

     String row =                  date + "," + 
         U.spacePadRight(8,    fScore) + "," + 
         U.spacePadRight(8,    recall) + "," + 
         U.spacePadRight(8, precision) + "," + 
         U.spacePadRight(8,        tp) + "," + 
         U.spacePadRight(8,        tn) + "," + 
         U.spacePadRight(8,        fp) + "," + 
         U.spacePadRight(8,        fn) ;
      
     this.contents.add( row);
    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, "Issue reading from the results file " + pCurrentResultsFile + " " + e.toString());
    }
  }

  // =================================================
  /**
   * readTopLinesFrom reads lines from the file - it removes blank rows.
   * 
   * @param pCurrentResultsFile
   * @param pNumberOfLines
   * @return String[]
   * @throws Exception 
  */
  // =================================================
 private String[] readTopLinesFrom(String pCurrentResultsFile, int pNumberOfLines) throws Exception {
    
    String[] returnVal = null;
    ArrayList<String> buff = new ArrayList<String>(25);
    BufferedReader in = null;
    String line = null;
    U.readFileIntoStringArray(pCurrentResultsFile);
    try {
       in = new BufferedReader ( new InputStreamReader( new FileInputStream(pCurrentResultsFile)));
       
       for ( int i = 0; i < pNumberOfLines; i++ ) {
        line = in.readLine() ;
        
        if ( line == null )              break;
        if ( line.isEmpty())             continue;
        if ( line.trim().length() == 0 ) continue;
        
        if ( line.trim().length() > 0 )
          buff.add(line.trim());
       }
       in.close();
       returnVal = buff.toArray(new String[buff.size()]);
       
    } catch (Exception e) {
      e.printStackTrace();
      GLog.println(GLog.ERROR_LEVEL, "Issue reading file " + pCurrentResultsFile + " " + e.toString());
      throw e;
    }
    return returnVal;
  }

  // =================================================
  /**
   * getMaxFScore 
   * 
   * @return String  score|date
  */
  // =================================================
 public String getMaxFScore() {
   
    String returnVal = "";
    double max = 0.0;
    String maxDate = "";
    
    
    // skip the header row
    for ( int i =  1; i < this.contents.size(); i++ ) {
  
      String row = this.contents.get(i);  
     if ( row != null && row.trim().length() > 0 ) {
      String cols[] = U.split(row, ",");
      
      String date = cols[0];
      String fScore = cols[1];
      double  fscore = Double.parseDouble(fScore);
      if (fscore > max  ) {
        max = fscore;
        maxDate = date;
      }
    } 
    }
    returnVal = maxDate + "|" + max;
      
   
    return returnVal;
  } // End method getMaxScore() ----------------------

  // =================================================
  /**
   * getMinFScore 
   * 
   * @return String  date|fScore
  */
  // =================================================
  public String getMinFScore() {
    
    String returnVal = "";
    double min = 9999999.0;
    String minDate = "";
    
 for ( int i =  1; i < this.contents.size(); i++ ) {
      
      String row = this.contents.get(i);  
      if ( row != null && row.trim().length() > 0 ) {
    
      String cols[] = U.split(row, ",");
      String date = cols[0];
      String fScore = cols[1];
      double  fscore = Double.parseDouble(fScore);
      if (fscore < min  ) {
        min = fscore;
        minDate = date;
      }
    }
 }
    returnVal = minDate + "|" + min;
    
    return returnVal;
      
  } // End Method getMinScore() ----------------------

  // =================================================
  /**
   * getLastFScore    (I'm assuming that the current score
   *                   has been put on the array, so the
   *                   last score is one up from that.)
   * 
   * @return String   date|fScore  
  */
  // =================================================
  public String getLastFScore() {
     return getScoreForRow( this.contents.size() -2 );
    
  } // End Method getlastFScore ======================
  
  // =================================================
  /**
   * getCurrentFScore (I'm assuming that the current score
   *                   has been put on the array by now
   * 
   * @return String   date|fScore  
  */
  // =================================================
  public String getCurrentFScore() {
     return getScoreForRow( this.contents.size() -1 );
    
  } // End Method getlastFScore ======================

  // =================================================
  /**
   * getScoreForRow 
   * 
   * @param pRownum
  */
  // =================================================
  private String getScoreForRow(int pRownum) {
    
    String returnVal = "";
    String row = this.contents.get(pRownum);
    String cols[] = U.split(row, ",");
    String date = cols[0];
    String fScore = cols[1];
    returnVal = date + "|" + fScore;
    
    return returnVal;
  } // End Method getScoreForRow() -----------------

  // =================================================
  /**
   * compare compares two results.  
   *     It returns a 1  if results A > B,  
   *                  0  if results A == B
   *                 -1  if results A < B
   * @param pA
   * @param pB
   * @return int 
  */
  // =================================================
  public static int compare(String pA, String pB) {
    int returnVal = -1;
    
    String aCols[] = U.split( pA );
    String bCols[] = U.split( pB);
    
    String aString = aCols[1].trim();
    String bString = bCols[1].trim();
    double a = Double.parseDouble( aString );
    double b = Double.parseDouble( bString );
    
    if      ( a > b  ) returnVal = 1;
    else if ( a == b ) returnVal = 0; 
    
    return returnVal;
  } // end Method compare() ------------------------

  

} // end Class EfficacyTests() ---------------------
